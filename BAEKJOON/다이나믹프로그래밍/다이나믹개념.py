'''
- 다이나믹 프로그래밍은 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법
- 이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 합니다.
- 다이나믹 프로그래밍의 구현은 일반적으로 두 가지 방식으로 구성됩니다.(탑다운과 보텀업)

- 최적 부분 구조(Optimal Substructure)
: 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제 해결

- 중복되는 부분 문제(Overlapping Subproblem)
: 동일한 작은 문제를 반복적으로 해결

- 메모이제이션(Memoization)
: 다이나믹 프로그래밍을 구현하는 방법 중 하나입니다.
- 한 번 계산한 결과를 메모리 공간에 메모하는 기법입니다.
- 같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져옵니다.
- 값을 기록해 놓는다는 점에서 캐싱(Cashing)이라고도 합니다.

- 탑다운(메모이제이션) 방식은 하향식이라고도 하며 보텀업 방식은 상향식이라고 한다.
- 다이나믹 프로그래밍의 전형적인 형태는 보텀업 방식
- 결과 저장용 리스트는 DP테이블이라고도 부릅니다.
- 엄밀히 말하면 메모이제이션은 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념을 의미
- 한번 계산된 결과를 담아 놓기만 하고 다이나믹 프로그래밍을 위해 활용하지 않을 수도 있다.
'''
# 재귀를 활용한 방법
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x - 1) + fibo(x - 2)

print(fibo(4))


# 탑다운 다이나믹 프로그램밍 소스코드(python) - 메모이제이션
dh = [0] * 100

def top_fibo(x):
    if x == 1 or x == 2:
        return 1

    if dh[x] != 0:
        return dh[x]

    dh[x] = top_fibo(x - 1) + top_fibo(x - 2)
    return dh[x]

print(top_fibo(99))


# 보텀업 다이나믹 프로그래밍 소스코드(python)
dd = [0] * 100
dd[1] = 1
dd[2] = 1
n = 99

for i in range(3, n+1):
    dd[i] = dd[i - 1] + dd[i - 2]

print(dd[n])

'''
다이나믹 프로그래밍 vs 분할 정복

다이나믹 프로그래밍과 분할 정복은 모두 최적 부분 구조를 가질 때 사용할 수 있습니다.
- 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있는 상황
다이나믹 프로그래밍과 분할 정복의 차이점은 부분 문제의 중복입니다.
- 다이나믹 프로그래밍 문제에서는 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복됩니다.
- 분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않습니다.
'''


'''
주어진 문제가 다이나믹 프로그래밍 유형임을 파악하는 것이 중요
- 가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 검토
- 다른 알고리즘으로 풀이 방법이 떠오르지 않는다면 다이나믹 프로그래밍 고려
일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에 (탑다운) 작은 문제에서 구한 답이 큰문
제에서 그대로 사용될 수 있으면, 코드를 개선하는 방법을 사용할 수 있다.
일반적인 코딩테스트 수준에서는 기본유형의 다이나믹 프로그래밍 문제가 출제되는 경우 많다.

'''